/*
 * generated by Xtext
 */
package org.archware.sosadl.generator;

import java.io.File;
import java.util.List;

import org.archware.sosadl.sosADL.SosADL;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {
	static String outputdirectory;
	private static String filename;

	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("There are no Args");
			printhelp();
			return;
		}

		Injector injector = new org.archware.sosadl.SosADLStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);

		for (int i = 0; i < args.length; i++) {

			//System.err.println("arg = '"+args[i]+"'");
			File pathfolder = new File(args[i]);
			if (args[i].startsWith("-")) {
				if (args[i].equals("-d")) {
					System.out.println("option -d :Translate all file in folder to IOSTS");
					if (args.length > i + 1) {
						File path = new File(args[i + 1]);
						if (path.isDirectory()) {
							outputdirectory = args[i + 1];
							if (! outputdirectory.endsWith("/")) {
								outputdirectory += "/";
							}
							System.out.print(outputdirectory);
							i++;
						} else {
							System.err.println("Wrong argment: Folder to put file iosts expected after -d");
							System.exit(1);
						}
					} else {
						System.err.println("Not enough argment: Folder to put file iosts expected after -d");
						System.exit(1);
					}
				} else if (args[i].equals("-s")) {
					File directory = new File(args[i + 1]);
					if (directory.exists()) {
						File[] listOfFile = directory.listFiles();
						for (int f = 0; f < listOfFile.length; f++) {
							if (listOfFile[f].isFile()) {
								filename = listOfFile[f].getName();
								if (filename.endsWith("sosadl")) {
									System.out.println("file" + listOfFile[f].getName());
								}
							} else {
								System.err.print("Wrong argment : Folder expected");
								System.exit(1);
							}
						}
						System.exit(0);
					} else {
						System.err.println("Wrong argment: Folder doesn't exist");
						System.exit(1);
					}
				} else if (args[i].equals("--help")) {
					printhelp();
					System.exit(1);
				}
			} else if (pathfolder.isDirectory()) {
				try {
					File[] listOfFile = pathfolder.listFiles();
					for (int j = 0; j < listOfFile.length; j++) {
						if (listOfFile[j].isFile()) {

							filename = listOfFile[j].getName();
							if (filename.endsWith("sosadl")) {
								System.out.println("file" + listOfFile[j].getName());
								main.runGenerator(listOfFile[j].getAbsoluteFile().toString());
							}

						} else {
							System.err.print("Wrong argment : Folder include SOSADL file expected");
						}
					}

				} catch (RuntimeException a) {
					a.printStackTrace();
					System.err.println("Not enough argment : Folder include SOSADL file expected ");
					System.exit(1);
				}

			} else if (args[i].endsWith("sosadl")) {
				//System.err.println("runGenerator('"+args[i]+"')");

				main.runGenerator(args[i]);

			} else {
				System.err.println("Wrong argment");
				printhelp();
				System.exit(1);
			}
		}
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private IGenerator generator;

	@Inject
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String filename) {
		// load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createURI(filename), true);

		// validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		if (outputdirectory != null) {
			fileAccess.setOutputPath(outputdirectory);
		} else {
			TreeIterator<EObject> _allContents = resource.getAllContents();
			Iterable<EObject> _iterable = IteratorExtensions.<EObject> toIterable(_allContents);
			Iterable<SosADL> _filter = Iterables.<SosADL> filter(_iterable, SosADL.class);
			for (final SosADL e : _filter) {
				Resource eResource = e.eResource();
				URI _uRI = eResource.getURI();
				//String resourceFilename = _uRI.trimFileExtension().lastSegment();
				String _sourceDir = _uRI.trimSegments(1).toString();
				fileAccess.setOutputPath(_sourceDir);
				// }
			}
		}
		// configure and start the generator

		generator.doGenerate(resource, fileAccess);

		System.out.println("Code generation finished.");
		
	}

	public static void printhelp() {
		System.err.println("UtilisationÂ : sosadlcli/sosadl2iosts.sh [OPTION]... [FILE]..OR..[FOLDER]... ");
		System.err.println("Translate file SOSADL to IOSTS");
		System.err.println("");
		System.err.println("-d [FOLDER]            Translate file SOSADL to IOSTS and put in this folder ");
		System.err.println(
				"                       with out this option all IOSTS files translated will located in the same location");
		System.err.println("-s [FOLDER]            Display all SOSADL file in Folder");
		System.err.println("");
		System.err.println(" --help                Display how to use");

	}
}
